:: endDayWidget [widget]
<<widget "endDay">><<nobr>>

	/* Moves a day forward */
		<<set $days += 1>>
		<<if $days == 30>>
			<<set $cycles += 1>>
			<<set $days = 0>>
		<<else>>
		<</if>>
		<<if $hydraTime > 0>>
			<<set $hydraTime-->>
		<<elseif $hydraTime == 0>>
			<<set $currentEvent = "HydraRaid">>
		<</if>>
			
	/* Ages up your eggs if you have them, or stops it running when you don't have eggs! */
		<<set _growcheck = 0>>
		<<set _hatchcheck = 0>>
		<<for _i to 0; _i < $eggs.length; _i++>>
			<<set $eggs[_i].time++>>
			<<if $eggs[_i].time == 7>>
				<<hatchMaker>>
				<<set $hatchling++>>
				<<run $eggs.splice(_i, 1)>>
				<<set _hatchcheck += 1>>
				<<set $eggsHatched += 1>>
			<<else>>
			<</if>>
		<</for>>

	/* Ages up hatchlings and sees if they need to grow up. */
		<<for _i to 0; _i lt $hatchlings.length; _i++>>
			<<set $hatchlings[_i].time++>>
			<<if $hatchlings[_i].time == 15>>
				<<dragonMaker>>
				<<run $hatchlings.splice(_i, 1)>>
				<<set _growcheck += 1>>
				<<if $firstCol == 0>>
					<<set _firstHatchiUp = 1>>
				<</if>>
				<<set $eggSpace to (($nest * 3) - ($eggs.length + $hatchlings.length))>>
			<</if>>
		<</for>>
		
	/* Determines if your dragons are adequetely sheltered, and thus, if they eat a normal amount, or more. */
			<<set _hungry = 0>>
			<<set _thirsty = 0>>
			<<set _unfed = 0>>
			<<set _nowater = 0>>
			<<set _left = []>>
			<<set _eat = 0>>
			<<set _hatchEat = 0>>
			<<set _hatchHungry = 0>>
			<<set _hatchUnfed = 0>>
			<<set _drink = 0>>
			<<set _hatchDrink = 0>>
			<<set _hatchThirsty = 0>>
			<<set _hatchNoWater = 0>>

	/* Set-up for: counting supplies brought in, counting workers. */
			<<set _food = 0>>
			<<run console.log("_food: " + _food)>>
			<<set _forcount = 0>>
			<<set _water = 0>>
			<<set _watcount = 0>>
			<<set _wood = 0>>
			<<set _stone = 0>>
			<<set _scavcount = 0>>
            <<set _buildcount = 0>>
			<<set _soldcount = 0>>
			<<set _soldierHunt = 0>>
			
	/* Player feeding and watering themselves + resetting actions. */

		/* All once-a-day actions... */

				/* For purposes of stealing eggs from other dragons. */
			<<set $theft = false>>

				/* For treasure-hunting, the foraging action. */
			<<set $ghunt = false>>

				/* If PC has visited any special location - only available once per day for balancing reasons. */
			<<set $hasVisited.kelpieLake = false>>
			<<set $hasVisited.hydraDen = false>>

				/* General out-of-colony actions a player can take per day. */
			<<set $player.action = 5>>

		
		/* Player consumption for the day. Start false so no fake hungry/thirsty alerts appear, then eat. */
		/* Founder eats first because if they go so does the colony. */
			<<set _pcHungry = false>>
			<<set _pcThirsty = false>>
			<<if $player.home.built == true>>
				<<if $food >= 3>>
					<<set $food -= 3>>
				<<else>>
					<<set $player.health -= 1>>
					<<set _pcHungry = true>>
				<</if>>
				<<if $water >= 4>>
					<<set $water -= 4>>
				<<else>>
					<<set $player.health -= 1>>
					<<set _pcThirsty = true>>
				<</if>>
			<<else>>
				<<if $food >= 8>>
					<<set $food -=8>>
				<<else>>
					<<set $player.health -= 1>>
					<<set _pcHungry = true>>
				<</if>>
				<<if $water >= 10>>
					<<set $water -= 10>>
				<<else>>
					<<set $player.health -= 1>>
					<<set _pcThirsty = true>>
				<</if>>
			<</if>>

			<<if _pcHungry == false && _pcThirsty == false && $player.health < 10>>
				<<set $player.health += 1>>
			<</if>>

	/* Gold bonus set up. This needs to be adjusted because it balloons obscenely... */
	/* The initial thought was that the expansion of the colony would keep it in line. I think I'll check what this actually does on desmos. */
			<<set _goldBonus = Math.round(Math.sqrt(($dragons.length / 11) * $gold) / ($dragons.length / 2))>>
			<<run console.log("Gold bonus: " + _goldBonus)>>

	
	/* Checks if there are hatchlings to feed, and feeds them. */
		<<if $hatchlings.length > 0>>
			
			<<set _hatchFood = 0>>
			<<set _hatchWater = 0>>
		
			<<for _i to 0; _i < $hatchlings.length; _i++>>

				<<if $hatchlings.time >= 9>>
					<<set _findChance = random(10)>>
					<<if _findchance >= 9>>
						<<set _findType = random(1)>>
						<<if _findType == 0>>
							<<set _hatchFood += random(2, 7)>>
						<<else>>
							<<set _hatchWater += random(2, 7)>>
						<</if>>
					<</if>>
				<<else>>
				<</if>>

				<<if $food >= (_eat + 4)>>
					<<set $hatchlings[_i].hunger = 0>>
					<<set _hatchEat += 4>>
				<<else>>
					<<set $hatchlings[_i].hunger += 1>>
					<<set _hatchHungry += 4>>
					<<set _hatchUnfed += 1>>
				<</if>>

				<<if $water >= (_water + 3)>>
					<<set $hatchlings[_i].thirst = 0>>
					<<set _hatchDrink += 3>>
				<<else>>
					<<set $hatchlings[_i].thirst += 1>>
					<<set _hatchThirsty += 3>>
					<<set _hatchNoWater += 1>>
				<</if>>
			<</for>>

			<<set $food += _hatchFood>>
			<<set $water += _hatchWater>>

		<</if>>


		
		<<if $dragons.length >= 1>>
				/* Housing first. */

				/* _newHouse tracks what dragons moved into new digs. */
			<<set _newHouse = []>>

				/* _homelesss tracks unsheltered dragons. */
			<<set _homeless = []>>

				/* Tracks dragons that moved up to a better place to sleep. */
			<<set _changedHome = []>>

				/* Checks if the for loop has run before. */
				/* Used to gather food / water THEN feed the colony. */
			<<set _firstPass = true>>

			<<for _a to 0; _a < 2; _a++>>
				<<if _firstPass == true>>

					<<for _i to 0; _i < $dragons.length; _i++>>

						<<if $findSleep == true>>

						/* Giving better homes to dragons if they're available. */
						/* Dragons prefer: */
						/* Setts, ruts, hollows, homeless. */
							<<if $dragons[_i].home !== "none">>
								<<if $dragons[_i].home == "rut">>
									<<if $shelter.setts.free > 0>>
										<<set $dragons[_i].home = "sett">>
										<<set $shelter.setts.free-->>
										<<set $shelter.setts.occupied++>>
										<<set $shelter.ruts.free++>>
										<<set $shelter.ruts.occupied-->>
										<<run _changedHome.push($dragons[_i].name)>>

									<</if>>

								<<elseif $dragons[_i].home == "hollow">>
									<<if $shelter.setts.free > 0>>
										<<set $dragons[_i].home = "sett">>
										<<set $shelter.setts.free-->>
										<<set $shelter.setts.occupied++>>
										<<set $shelter.ruts.free++>>
										<<set $shelter.ruts.occupied-->>
										<<run _changedHome.push($dragons[_i].name)>>

									<<elseif $shelter.ruts.free > 0>>
										<<set $dragons[_i].home = "rut">>
										<<set $shelter.ruts.free-->>
										<<set $shelter.ruts.occupied++>>
										<<set $shelter.hollows.free++>>
										<<set $shelter.hollows.occupied-->>
										<<run _changedHome.push($dragons[_i].name)>>

									<<else>>
									
									<</if>>

								<</if>>

							<<else>>

								/* Giving dragons homes if any available, in preferential order. */
								/* If not, they're added to the homeless array. */

								<<if $shelter.setts.free >= 1>>
									<<set $dragons[_i].home = "sett">>
									<<set $shelter.setts.free -= 1>>
									<<set $shelter.setts.occupied += 1>>
									<<run _newHouse.push($dragons[_i].name)>>

								<<elseif $shelter.ruts.free >= 1>>
									<<set $dragons[_i].home = "rut">>
									<<set $shelter.ruts.free -= 1>>
									<<set $shelter.ruts.occupied += 1>>
									<<run _newHouse.push($dragons[_i].name)>>

								<<elseif $shelter.hollows.free >= 1>>
									<<set $dragons[_i].home = "hollow">>
									<<set $shelter.hollows.free -= 1>>
									<<set $shelter.hollows.occupied += 1>>
									<<run _newHouse.push($dragons[_i].name)>>

								<<else>>
									<<run _homeless.push($dragons[_i].name)>>

								<</if>>

							<</if>>

						<<else>>

							<<if $dragons[_i].home == "none">>

								<<run _homeless.push($dragons[_i].name)>>

							<<else>>

							<</if>>

						<</if>>


							/* Setting a dragon's time up one, for funsies. Will be genuinely used later. */
						<<set $dragons[_i].time++>>

							/* Adds a dragon to a job counter, gives them their daily xp, and then calculates what they've brought back... if anything. */
							/* Each job consumes a different amount of food. */
							/* Should probably move job gains to a datamap, like buildings are. */
							/* Maybe add some randomness to XP gains? */
							/* ... Though considering I want to add caps... */
							/* Guess I'll be altering how the Interact page works to fit? */
							/* _goldBonus only works if greater than one. Otherwise, it's set to one to prevent a malus. */
						<<switch $dragons[_i].job>>
							<<case "forager">>
								<<set _forcount += 1>>
								<<set $dragons[_i].foragexp += 0.1>>
								<<run console.log("xp: " + $dragons[_i].foragexp)>>
								<<set _food += Math.round(($dragons[_i].foragexp * _goldBonus) + random(3))>>

							<<case "rainier">>
								<<set _watcount += 1>>
								<<set $dragons[_i].rainxp += 0.1>>
								<<set _water += (Math.round($dragons[_i].rainxp * _goldBonus) + random(3))>>

							<<case "scavenger">>
								<<set _scavcount += 1>>
								<<set $dragons[_i].scavxp += 0.1>>
								<<set _goldluck = random(-50,75)>>
								<<set _scavPick = random(1,2)>>
								<<if _scavPick == 1>>
									<<set _wood += (Math.round($dragons[_i].scavxp * _goldBonus) + random(3))>>
								<<else>>
									<<set _stone += (Math.round($dragons[_i].scavxp * _goldBonus) + random(3))>>
								<</if>>

							<<case "builder">>
								<<set _buildcount += 1>>
								<<set $dragons[_i].buildxp += 0.1>>

							<<case "soldier">>
								<<set _soldcount += 1>>
								<<set $dragons[_i].soldierxp += 0.1>>
								<<set _huntluck = random(-50, 75)>>
								<<if _huntluck >= 60>>
									<<set _soldierHunt += (Math.round($dragons[_i].soldierxp * _goldBonus) + random(15,30))>>
								<</if>>

							<<case default>>

								
						<</switch>>

					<</for>>

					<<set _firstPass = false>>
					
				<<else>>
					<<set $food += (_food + _soldierHunt)>>
					<<set $water += _water>>
					<<set $stone += _stone>>
					<<set $wood += _wood>>
					<<for _i to 0; _i < $dragons.length; _i++>>

						/* Feeding based on current job, + if they are housed or not. */
						/* Slackers produce nothing but consume the least of adult dragons. */
						/* Dragons that produce food need less at dinner time, but more water. */
						/* Dragons that produce water are inverted. */
						/* Others consume more in general, because they're gathering non-consumables and working. */
						/* And if they're unhoused, they consume more. Life is pain, binge to cope. =3c */

						<<switch $dragons[_i].job>>
							<<case "slacker">>
								<<if $dragons[_i].home !== "none">>
									<<if $food >= (_eat + 3)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 3>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 3>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 3)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 3>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 3>>
										<<set _nowater += 1>>
									<</if>>

								<<else>>
									<<if $food >= (_eat + 4)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 4>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 4>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 4)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 4>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 4>>
										<<set _nowater += 1>>
									<</if>>
								<</if>>

							<<case "forager">>
								<<if $dragons[_i].home !== "none">>
									<<if $food >= (_eat + 1)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 1>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 1>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 4)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 4>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 4>>
										<<set _nowater += 1>>
									<</if>>

								<<else>>
									<<if $food >= (_eat + 2)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 2>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 2>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 5)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 5>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 5>>
										<<set _nowater += 1>>
									<</if>>
								<</if>>

							<<case "rainier">>
								<<if $dragons[_i].home !== "none">>
									<<if $food >= (_eat + 3)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 3>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 3>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 1)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 1>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 1>>
										<<set _nowater += 1>>
									<</if>>

								<<else>>
									<<if $food >= (_eat + 4)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 4>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 4>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 2)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 2>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 2>>
										<<set _nowater += 1>>
									<</if>>
								<</if>>

							<<case "scavenger">>
								<<if $dragons[_i].home !== "none">>
									<<if $food >= (_eat + 5)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 5>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 5>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 6)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 6>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 6>>
										<<set _nowater += 1>>
									<</if>>
								<<else>>
									<<if $food >= (_eat + 6)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 5>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 6>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 7)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 7>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 7>>
										<<set _nowater += 1>>
									<</if>>
								<</if>>

							<<case "builder">>
								<<if $dragons[_i].home !== "none">>
									<<if $food >= (_eat + 4)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 4>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 4>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 4)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 4>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 4>>
										<<set _nowater += 1>>
									<</if>>

								<<else>>
									<<if $food >= (_eat + 5)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 5>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 5>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 5)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 5>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 5>>
										<<set _nowater += 1>>
									<</if>>
								<</if>>

							<<case "soldier">>
								<<if $dragons[_i].home !== "none">>
									<<if $food >= (_eat + 5)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 5>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 5>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 4)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 4>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 4>>
										<<set _nowater += 1>>
									<</if>>
								<<else>>
									<<if $food >= (_eat + 6)>>
										<<set $dragons[_i].hunger = 0>>
										<<set _eat += 5>>
									<<else>>
										<<set $dragons[_i].hunger += 1>>
										<<set _hungry += 6>>
										<<set _unfed += 1>>
									<</if>>

									<<if $water >= (_drink + 5)>>
										<<set $dragons[_i].thirst = 0>>
										<<set _drink += 5>>
									<<else>>
										<<set $dragons[_i].thirst += 1>>
										<<set _thirsty += 5>>
										<<set _nowater += 1>>
									<</if>>
								<</if>>

							<<default>>
								<<errorPopup "endDayFeed">>
								<<run console.log("endDayFeed sourced from: "$dragons[_i].name + $dragons[_i].job)>>
								<<set _errorDragon = $dragons[_i].name>>
								<<set _errorJob = $dragons[_i].job>>

						<</switch>>
					<</for>>
				<</if>>
			<</for>>
		<</if>>


        <<buildQueue>>

	
			/* Removes consumbles from the resource counts... */
		<<set $food -= (_eat + _hatchEat)>>
		<<set $water -= (_drink + _hatchDrink)>>

			/* ... then makes sure the left-overs aren't overcap. */
			/* Done in that order to make sure there's no excess while dragons are whining about deprivation. */
		<<if $food > $foodCap>>
			<<set $food = $foodCap>>
		<</if>>
		<<if $water > $waterCap>>
			<<set $water = $waterCap>>
		<</if>>
		<<if $wood > $woodCap>>
			<<set $wood = $woodCap>>
		<</if>>
		<<if $stone > $stoneCap>>
			<<set $stone = $stoneCap>>
		<</if>>

		<<if $food <= 0>>
			<<set $food = 0>>
		<</if>>
		<<if $water <= 0>>
			<<set $water = 0>>
		<</if>>

		<<for _i to 0; _i < $dragons.length; _i++>>
			<<if $dragons[_i].hunger >= 3 || $dragons[_i].thirst >= 3>>
				<<set _rejoin = random(0,10)>>
				<<if _rejoin >= 8>>
					<<set $dragons[_i].origins = "deprivation">>
					<<set $dragons[_i].hunger = 0>>
					<<set $dragons[_i].thirst = 0>>
					<<run $goneDragons.push(clone($dragons[_i]))>>
				<</if>>
				<<run _left.push($dragons[_i].name)>>
				<<switch $dragons[_i].home>>
					<<case "none">>

					<<case "rut">>
						<<set $shelter.ruts.free += 1>>
						<<set $shelter.ruts.occupied -= 1>>
					
					<<case "sett">>
						<<set $shelter.setts.free += 1>>
						<<set $shelter.setts.occupied -= 1>>

					<<case "hollow">>
						<<set $shelter.hollows.free += 1>>
						<<set $shelter.hollows.occupied -= 1>>
					
					<<default>>
						<<errorPopup "endDayHome">>
						<<run console.log("endDayHome sourced from: " + $dragons[_i].name + ": " + $dragons[_i].home)>>
						<<set _errorDragon = $dragons[_i].name>>
						<<set _errorHome = $dragons[_i].home>>
						
				<</switch>>
			<<else>>
			<</if>>
		<</for>>


		<<set $dragons = $dragons.filter(dragons => dragons.hunger < 3)>>
		<<set $dragons = $dragons.filter(dragons => dragons.thirst < 3)>>
		<<updateHome>>
		<<updateBar>>
			
<</nobr>><</widget>>


<<widget "eggOne">><<nobr>>
        <<if $eggsHatched >= 1 and $eggEvent === 0>>
        <<set $eggEvent += 1>><<linkappend "Something has happened...">>
				<hr>
				Your head snaps up from being curled around the eggs as something moves. Nothing happens for another moment, and you wonder if your paranoia is simply acting up - it is not easy being a <<print $player.title>>. But there is another shift, and this, you realize, is one of the eggs. You scramble to your claws, panic and joy tearing at your hearts as something within begins to //tap! Tap! Tap!// at the inside. You drop again to your belly, snuffling and cooing to the egg. Yes, you have seen many eggs hatch - assisted many yourself! - but there is something... something so different now; something strange and wonderful about this little rocking stone, the crackling of its shell... <br> <br>
			
				You remember yourself after a moment, and use your claws to gently split the shell. The hatchling within, so small - so, //so// small in its egg - cries out with a high note that has you prizing away more and more shell. Eventually, a thin snout pokes out of the shell, nostrils flaring and sniffling as it takes its first breath of air. Soon enough, it returns to cracking and pushing, as you continue the task of assisting it. <br> <br>

				So long later - though the moon has scarcely shifted - the hatchling shrieks, and the last of the shell falls away from it. You pull it close and clean it, rumbling softly in your throat as exhaustion claims the little thing and sends it drifting off against your chest, little breaths slowing to the gentle and deep motions of dreams. <br> <br>

				You continue cleaning them, a new weight in your hearts for this little treasure. Your very first hatchling.
				<hr>
			<</linkappend>>
		<<else>>
        <</if>>
<</nobr>><</widget>>

<<widget "colOne">><<nobr>>
        <<if _firstHatchiUp == 1 and $firstCol === 0>>
        <<set $firstCol += 1>><<linkappend "Something has happened...">>
                <hr>
                As you're doing your nightly rounds along the colony, you discover your first hatchling - your first egg, your shining-jewel - outside the nursery, watching you solemnly. You tilt your head in silent permission for them to speak. <br> <br>
                
                "I think I am ready for work," they say softly. "I am large and strong enough, and have been exploring the edges of the home-grounds. I know what is edible now, and how to navigate - you've taught me well." It sounds so much like a plead. "I wish to work, <<print $player.title>>. Please." <br> <br>
                
                You startle at the sound of your title - for all that you have raised them, your heart-of-hearts has referred to you as nothing but the purring-click that all hatchlings call their brooders. Certainly, you told them of who you are - //what// you are. But they never saw cause to address you as such. <br> <br>
                
                ... They mean it. <br> <br>
                
                In respect to the gravity of their request, you assume your mantle of <<print $player.title>>, and, with quiet authority, inform them to be gone from the nursery by dawn. They will work now. The relief and gratitude in their eyes is painful as they disappear into the nursery - to say goodbye to their younger sibling, you assume. <br> <br>
                
                Your chest feels tight as you continue your evening rounds. Has time really moved so quickly?
                <hr>
            <</linkappend>>
		<<else>>
        <</if>>
<</nobr>><</widget>>

