:: BuilderRestDisplayWidget [widget]

	/* It is not part of endDay but IS part of the day-end logic, */
	/* Specifically rest, so I will be putting it in the endDay */
	/* Widget hole. */
<<widget "builderRestDisplay">><<nobr>>
	
		/* First we're checking if we have builders and a queue. */
		/* If yes to both, your builders start working. */
		/* If you only have a queue and no builders, the game */
		/* Reminds the player to assign some builders to work. */
		/* If you have builders and no queue, the player is */
		/* Then told the builders are just chilling. */
	<<if $buildQueue.length > 0 && _builderCount > 0>>

		Your <<plural _builderCount "builder" "builders">> 

		<<switch $builderStatus>>
			<<case 1>>
				have completed the planning stage for a <<print $buildQueue[0]>>.<br><br>

			<<case 2>>
				are working on a <<print $buildQueue[0]>>;
				<<if _resourceDown == false>>
					they should be done in <<plural $buildTime "day" "days">>.
				<<else>>
					but have run out of material. They needed
					<<if _buildStone > 0>>
						<<print _buildStone>> stone;
					<</if>>
					<<if _buildWater > 0>>
						<<print _buildWater>> water;
					<</if>>
					<<if _buildWood > 0>>
						<<print _buildWood>> wood;
					<</if>>
					when they have what they need, the <<plural _builderCount "builder" "builders">> will continue work.
				<</if>>
				<br><br>
			
			<<case 3>>
				have finished work on a <<print _finished>>!
				<<if $buildQueue.length > 0>>
					Tomorrow, they'll start planning for a <<print $buildQueue[0]>>.
				<<else>>
					They've got nothing else to build, so they'll be waiting for your next plans.
				<</if>>
				<br><br>

				<<default>>
					<<errorPopup "builderStatus">>

		<</switch>>
	
	<<elseif $buildQueue.length > 0 && _builderCount == 0>>
		There's <<plural $buildQueue.length "building" "buildings">> to be built, but no one to build them.<br><br>
		

	<<elseif $buildQueue.length == 0 && _builderCount > 0>>
		Your <<plural _builderCount "builder is" "builders are">> waiting for your next project.<br><br>

	<<else>>

	<</if>>
<</nobr>><</widget>>

	/* Welcome to buildQueue. */
	/* buildQueue takes all the buildings */
	/* that players want their builders to build, */
	/* And sets them up for exactly that. */
<<widget "buildQueue">><<nobr>>

		/* First we check if buildQueue even NEEDS to do anything. */
		/* Then we look at if it CAN. */
		/* builderRestDisplay will handle telling the player, */
		/* but buildQueue needs to know so it doesn't fire erroneously. */
	<<if $buildQueue.length > 0>>

		<<if _builderCount > 0>>

				/* With builders existent, resourceDown is set to note */
				/* It exists. Should it become true, it means we need */
				/* More of a resource. The other temporary variables */
				/* Then establish how much of a resource was needed */
				/* To complete the current stage of the structure. */
			<<set _resourceDown = false>>
			<<set _buildStone = 0>>
			<<set _buildWater = 0>>
			<<set _buildWood = 0>>

				/* Now we hop between different potential projects */
				/* Based on the first item in the buildQueue array. */
				/* These are organized in the following order: */
				/* Defenses, Job Sites, Shelters, Special, Storage. */
				/* Yes, it is out of order comparative to the build page. */
				/* No I do not care. */
				/* All buildings within these categories are organized */
				/* Alphabetically, like most things, for my sanity. */
			<<switch $buildQueue[0]>>

		/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DEFENSES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
				<<case "moat">>
					<<run console.log("registered moat.")>>
					<<if $buildTime >= 1>>
						<<run console.log("started building moat.")>>
						<<if $defenseBuildings.moat.amount < 2>>
							<<set _buildStone = Math.round($defenseBuildings.moat.priceS / Math.round($defenseBuildings.moat.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
							<<set _buildWood = Math.round($defenseBuildings.moat.priceW / Math.round($defenseBuildings.moat.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
							<<if $stone >= _buildStone && $wood >= _buildWood>>
								<<set $buildTime -= 1>>
								<<set $stone -= _buildStone>>
								<<set $wood -= _buildWood>>
							<<else>>
								<<set _resourceDown = true>>
							<</if>>

							<<buildTimeSanityCheck>>

						<<elseif $defenseBuildings.moat.amount == 2>>
							<<set _buildWater = Math.round($defenseBuildings.moat.priceWa / Math.round($defenseBuildings.moat.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
							<<if $water >= _buildWater>>
								<<set $buildTime -= 1>>
								<<set $water -= _buildWater>>
							<<else>>
								<<set _resourceDown = true>>
							<</if>>

							<<buildTimeSanityCheck>>

						<</if>>
						
					<<elseif $buildTime == 0>>
						<<run console.log("finished building.")>>
						<<set $defenseBuildings.moat.amount += 1>>
						<<set _finished to "moat">>
						<<set $buildTime = -1>>
						<<run $buildQueue.deleteAt(0)>>
						<<set $builderStatus = 3>>
						<<run console.log("Builder status: " + $builderStatus)>>
						<<if $defenseBuildings.moat.amount == $defenseBuildings.moat.max>>
							<<run $buildQueue.delete("moat")>>
						<</if>>

					<<else>>
						<<run console.log("Got ready.")>>
						<<set $buildTime = Math.round($defenseBuildings.moat.buildTime * (2 / (Math.sqrt(_wantedCount) + 1)))>>
						<<if $buildTime < 1>>
							<<set $buildTime = 1>>
						<</if>>
						<<set _startBuild = true>>
						<<set $builderStatus to 1>>
					
					<</if>>
					
				<<case "outpost">>
					<<run console.log("registered post.")>>
					<<if $buildTime >= 1>>
						<<run console.log("started building post.")>>
						<<set _buildStone = Math.round($defenseBuildings.outpost.priceS / Math.round($defenseBuildings.outpost.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
							<<run console.log(_buildStone + " _buildStone")>>
						<<set _buildWood = Math.round($defenseBuildings.outpost.priceW / Math.round($defenseBuildings.outpost.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
							<<run console.log(_buildWood + " _buildWood")>>
						<<if $stone >= _buildStone && $wood >= _buildWood>>
							<<run console.log("buildTime is " + $buildTime)>>
							<<set $buildTime -= 1>>
							<<set $stone -= _buildStone>>
							<<set $wood -= _buildWood>>
						<<else>>
							<<set _resourceDown = true>>
							<<run console.log("_resourceDown = true, apparently." + _resourceDown)>>
						<</if>>
						<<buildTimeSanityCheck>>
						
					<<elseif $buildTime == 0>>
						<<run console.log("finished building.")>>
						<<set $defenseBuildings.outpost.amount += 1>>
						<<set _finished to "outpost">>
						<<run console.log("finished is: " + _finished)>>
						<<set $buildTime = -1>>
						<<run $buildQueue.deleteAt(0)>>
						<<set $builderStatus to 3>>
						<<if $defenseBuildings.outpost.amount == $defenseBuildings.outpost.max>>
							<<run $buildQueue.delete("outpost")>>
						<</if>>

					<<else>>
						<<run console.log("Got ready.")>>
						<<set $buildTime = (Math.round($defenseBuildings.outpost.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
						<<run console.log("Buildtime 2: " + $buildTime)>>
						<<if $buildTime < 1>>
							<<set $buildTime = 1>>
						<</if>>
						<<run console.log("Buildtime 2: " + $buildTime)>>
						<<set _startBuild = true>>
						<<set $builderStatus to 1>>
					
					<</if>>

				<<case "palisade">>
					<<run console.log("registered pali.")>>
					<<if $buildTime >= 1>>
						<<run console.log("started building pali.")>>
						<<set _buildStone = Math.round($defenseBuildings.palisade.priceS / Math.round($defenseBuildings.palisade.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
						<<set _buildWood = Math.round($defenseBuildings.palisade.priceW / Math.round($defenseBuildings.palisade.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
						<<if $stone >= _buildStone && $wood >= _buildWood>>
							<<set $buildTime -= 1>>
							<<set $stone -= _buildStone>>
							<<set $wood -= _buildWood>>
						<<else>>
							<<set _resourceDown = true>>
						<</if>>
						<<buildTimeSanityCheck>>
						
					<<elseif $buildTime == 0>>
						<<run console.log("finished building.")>>
						<<set $defenseBuildings.palisade.amount += 1>>
						<<set _finished to "palisade">>
						<<set $buildTime = -1>>
						<<run $buildQueue.deleteAt(0)>>
						<<set $builderStatus to 3>>
						<<if $defenseBuildings.palisade.amount == $defenseBuildings.palisade.max>>
							<<run $buildQueue.delete("palisade")>>
						<</if>>

					<<else>>
						<<run console.log("Got ready.")>>
						<<set $buildTime = (Math.round($defenseBuildings.palisade.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
						<<run console.log("Buildtime 2: " + $buildTime)>>
						<<if $buildTime < 1>>
							<<set $buildTime = 1>>
						<</if>>
						<<set _startBuild = true>>
						<<set $builderStatus to 1>>

					<</if>>

				<<case "rockfall">>
					<<run console.log("registered rockfall.")>>
					<<if $buildTime >= 1>>
						<<run console.log("started building rockfall.")>>
						<<set _buildStone = Math.round($defenseBuildings.rockfall.priceS / Math.round($defenseBuildings.rockfall.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
						<<set _buildWood = Math.round($defenseBuildings.rockfall.priceW / Math.round($defenseBuildings.rockfall.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
						<<if $stone >= _buildStone && $wood >= _buildWood>>
							<<set $buildTime -= 1>>
							<<set $stone -= _buildStone>>
							<<set $wood -= _buildWood>>
						<<else>>
							<<set _resourceDown = true>>
						<</if>>
						<<buildTimeSanityCheck>>
						
					<<elseif $buildTime == 0>>
						<<run console.log("finished building.")>>
						<<set $defenseBuildings.rockfall.amount += 1>>
						<<set $defenseBuildings.rockfall.empty += 1>>
						<<set _finished to "rockfall">>
						<<set $buildTime = -1>>
						<<run $buildQueue.deleteAt(0)>>
						<<set $builderStatus to 3>>
						<<if $defenseBuildings.rockfall.amount == $defenseBuildings.rockfall.max>>
							<<run $buildQueue.delete("rockfall")>>
						<</if>>

					<<else>>
						<<run console.log("Got ready.")>>
						<<set $buildTime = Math.round($defenseBuildings.rockfall.buildTime * (2 / (Math.sqrt(_wantedCount) + 1)))>>
						<<if $buildTime < 1>>
							<<set $buildTime = 1>>
						<</if>>
						<<set _startBuild = true>>
						<<set $builderStatus to 1>>
					
					<</if>>


		/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SHELTERS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
				<<case "hollow">>
					<<run console.log("Registered hollow.")>>
					<<if $buildTime >= 1>>
						<<run console.log("started building hollow.")>>
						<<set _buildStone = Math.round($shelter.hollows.priceS / Math.round($shelter.hollows.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
						<<set _buildWood = Math.round($shelter.hollows.priceW / Math.round($shelter.hollows.buildTime * (2 / (Math.sqrt(_wantedCount) + 1))))>>
						<<if $stone >= _buildStone && $wood >= _buildWood>>
							<<set $buildTime -= 1>>
							<<set $stone -= _buildStone>>
							<<set $wood -= _buildWood>>
						<<else>>
							<<set _resourceDown = true>>
						<</if>>
						<<buildTimeSanityCheck>>
						
					<<elseif $buildTime == 0>>
						<<run console.log("finished building.")>>
						<<set $shelter.hollows.amount += 1>>
						<<set $shelter.hollows.free += (($shelter.hollows.amount * $shelter.hollows.shelter) - ($shelter.hollows.occupied))>>
						<<set _finished to "hollow">>
						<<set $buildTime = -1>>
						<<run $buildQueue.deleteAt(0)>>
						<<set $builderStatus to 3>>

					<<else>>
						<<run console.log("Got ready.")>>
						<<set $buildTime = Math.round($shelter.hollows.buildTime * (2 / (Math.sqrt(_wantedCount) + 1)))>>
						<<run console.log("Buildtime 2: " + $buildTime)>>
						<<if $buildTime < 1>>
							<<set $buildTime += 1>>
						<</if>>
						<<set _startBuild = true>>
						<<set $builderStatus = 1>>
						
					<</if>>

		/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ERRORS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
				<<default>>
					<<errorPopup "buildQueueWeird">>

			<</switch>>

		<<else>>

		<</if>>

	<<else>>

	<</if>>

<</nobr>><</widget>>