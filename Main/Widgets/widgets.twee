:: Widgets [widget] {"position":"250,0","size":"100,100"}

/*Creates an egg with a timer. The time is purely to make sure everyone hatches when they should.*/
<<widget "eggMaker">>
	<<silently>>
		<<run $eggs.push( {
			
			time: random(0, 6),
			
		} )>>
	
	<</silently>>
<</widget>>

/* Creates hatchlings out of eggs. See dragonmaker for more info.*/
<<widget "hatchMaker">>
	<<silently>>
	
		<<run $hatchlings.push( {
		
			time: 7
			
			} )>>
	
	<</silently>>
<</widget>>


/*
	Generates a dragon---
	Dragon information is a passage that sets names, pers, age, job... type refers to species & subspecies when I implement those; hunger / thirst are if your dragon was fed today. If not, they go up. The XP refers to how long they've been in a certain job.
	Currently, ages are egg, hatchling, winglet, adult. Winglets aren't implemented yet, and do nothing; only hatchlings and adults matter.
    First job is "slacker", which is a dragon that does nothing.
*/
<<widget "dragonMaker">>

		<<run $dragons.push( {
		
			name: either($dNames), 
			
			type: "Dragon",
			
			personality: either($dPers), 

			time: 15,
			
			age: "Adult", 
			
			job: "slacker", 

			home: "none",
			
			foragexp: 0,
			
			rainxp: 0,
			
			scavxp: 0,

			buildxp: 0,
			
			hunger: 0, 
			
			thirst: 0,

			left: "stay",

			origin: "stay"
			
			} )>>
<</widget>>

<<widget "dragonWanderer">>

	<<run $dragons.push( {
		
			name: either($dNames),
			
			type: "Dragon",
			
			personality: either($dPers),

			time: random(15,40),
			
			age: "Adult",
			
			job: "slacker",

			home: "none",
			
			foragexp: random(15),
			
			rainxp: random(15),
			
			scavxp: random(15),

			buildxp: random(15),
			
			hunger: 0,
			
			thirst: 0,

			left: "stay",

			origin: "wanderer"
			
		} )>>

<</widget>>

<<widget "updateBar">>
	<<nobr>>
		<<replace "#story-caption">>
			<<include "StoryCaption">>
		<</replace>>
	<</nobr>>
<</widget>>

<<widget "updateHome">>
	<<nobr>>
		<<set $home = (($shelter.ruts.amount * $shelter.ruts.shelter) + ($shelter.setts.amount * $shelter.setts.shelter) + ($shelter.hollows.shelter * $shelter.hollows.amount))>>
	<</nobr>>
<</widget>>

<<widget "addRut">>
	<<nobr>>
		<<set $dragons[$int].home = "rut">>
		<<set $shelter.ruts.free -= 1>>
		<<set $shelter.ruts.occupied += 1>>
		<<updateHome>>
		<<run Engine.show()>>
	<</nobr>>
<</widget>>

<<widget "addSett">>
	<<nobr>>
		<<set $dragons[$int].home = "sett">>
		<<set $shelter.setts.free -= 1>>
		<<set $shelter.setts.occupied += 1>>
		<<updateHome>>
		<<run Engine.show()>>
	<</nobr>>
<</widget>>

<<widget "addHollow">>
	<<nobr>>
		<<set $dragons[$int].home = "Hollow">>
		<<set $shelter.hollows.free -= 1>>
		<<set $shelter.hollows.occupied += 1>>
		<<updateHome>>
		<<run Engine.show()>>
	<</nobr>>
<</widget>>

<<widget "errorPopup">>
	<<nobr>>
		<<script>>
			Dialog.setup("Error!");
			Dialog.wiki(Story.get("ErrorDialog").processText());
			Dialog.open();
		<</script>>
	<</nobr>>
<</widget>>
