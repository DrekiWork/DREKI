:: StoryInit [Special] {"position":"100,0","size":"100,100"}
<<nobr>>

/* ~~~~~~~~~~~~~ PLAYER SET-UP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

		/* Title is what the player is referred to by colonists and others. */
		/* Actions are how many times a player can leave the colony before day end. */
		/* Health is health; lost if player doesn't eat or drink at day end. */
		/* Specials is trophies claimed from defeated bosses, ex. the Hydra's Heart. */
	<<set $player = {
		title : "Founder",
		action : 5,
		health : 10,
		home : {
			built : false,
			space : 0,
			vanity : 0
		},
		specials : []
	}>>

		/* Set to false to allow the player to look for gold once per day at game start. */
		/* Gets reset on rest. */
	<<set $goldHunt = false>>

		/* Tracks if the player has atttempted to steal an egg 'today'. */
		/* Resets each rest to false to allow another attempt. */
	<<set $eggStolen = false>>

		/* visitPlaces flag determines if the player has run into a special location. */
		/* False means they haven't and can't choose to go to a special location from Sandbox. */
		/* hasVisited checks if you've gone to a specific location, and disables it. No cheese! */
	<<set $visitPlaces = false>>
	<<set $hasVisited = {
		hydraDen : false,
		kelpieLake : false
	}>>



/* ~~~~~~~~~~~~~ DRAGONS SET-UP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

	/* ~~~ MEANINGFUL ~~~ */

		/* Used to generate unique ID numbers for colonists. */
	<<set $npcIDCounter = 0>>

		/* Name list to be chosen from, in alphabetical order. */
	<<set $dNames to [
		"Abaddon", "Adula", "Ajax", "Alban", "Alaric", "Alcar", "Alduin", "Altair", "Alvar", "Andor", "Angelus", "Apara", "Aragorn", "Arden", "Argus", "Aric", "Asher", "Astor", "Athine", "Aysaelo", "Azizi", 
		"Baeliru", "Bakari", "Baruti", "Beroan", "Blaze", "Boldar", "Boris", "Brantley", "Briam", "Brigid", "Bruno", 
		"Cadmus", "Caedialo", "Caius", "Camo", "Caspar", "Cedric", "Cigam", "Clay", "Conan", "Copano", "Cosmos", "Cyclone", "Cynder", "Cyprin", "Cyril", "Cyrus", 
		"Damon", "Darius", "Delbin", "Devlin", "Drobit", 
		"Eirlys", "Eleri", "Ember", "Enzo", "Eivias", 
		"FÃ­rnen", "Flame", "Flavius", "Fonsworthy", 
		"Galadriel", "Gavin", "Ghidora", "Gildas", "Gildor", "Gimli", "Glaedr","Greyoll", "Grigori", "Gwyneth", "Gunnar", 
		"Halen", "Halvor", "Haldor", "Hexus", "Helgi", 
		"Iola", "Isaak", "Ilmarinen", "Ivor", 
		"Jaren", "Jarvis", "Jed", "Jormungandr", 
		"Kael", "Kasiya", "Kosoko", 
		"Laird", "Lateef", "Legna", "Lenora","Lindar", "Liraz", "Lirien", "Lutalo", 
		"Magnus", "Makar", "Malefor", "Maximos", "Mazi", "Miasmar", 
		"Nestor", "Nevin", "Nils", "Nithring", 
		"Obasi", "Odahviing", "Ophelia", "Oswin", 
		"Paarthurnax", "Pyra", 
		"Rhiannon", "Rhys", "Ragnar", "Ramses", "Revilo", 
		"Sadiki", "Saphira", "Sif", "Seren", "Skipper", "Shruikan", "Smaug", "Soot", "Spry", "Spyro", "Storm", "Sunburn", 
		"Tamlin", "Tanwen", "Terrador", "Theodorix", "Thor", "Tirion", "Titan", "Todor", "Tomas", "Torin", "Trondo", "Twister", 
		"Ulric", "Unika", "Ullr", "Urgost", "Useni", 
		"Valen", "Varalys", "Varda", "Vathek", "Volteer", 
		"Woden", "Wren", 
		"Yara", 
		"Zander", "Zane", "Zantor", "Zaren", "Zephyr", "Zinc"
	]>>
	
		/* Personality archetypes. */
		/* Traits are noted... traits... that indicate what kind of 'archetype' a person is; their most prominent social behaviors. */
		/* Jobs are jobs that a certain archetype is best at. */
		/* Likes are archetypes that any given one gets along best with; +1 to social interactions. */
		/* DISlikes are archetypes that any given one does NOT get along with at all; -1 to social interactions. */
		/* Archetypes inherently have an affinity for themselves, as well as two others. */
		/* Lazy is the only exception, because no one in the colony likes picking up the slack. */
	<<set $personalities = {
        "cynical": {
            traits: ["abrasive", "aloof", "blunt", "critical", "insecure", "jaded", "mean", "pessimistic", "sarcastic", "skeptical", "witty"],
            jobs: ["salvager", "scavenger"],
            likes: ["militaristic", "opportunist"],
            dislikes: ["dreamer", "idealist", "lazy"]
        }, 
        "dreamy": {
            traits: ["absentminded", "creative", "curious", "dreamy", "emotional", "imaginative", "quiet", "queer", "scatterbrained", "visionary", "whimsical"],
            jobs: ["forager", "scavenger"],
            likes: ["social", "rebellious"],
            dislikes: ["militaristic", "cynical", "lazy"]
        }, 
        "idealistic": {
            traits: ["altruistic", "empathetic", "enthusiastic", "gentle", "hopeful", "idealistic", "naive", "optimistic", "passionate", "selfless", "tolerant"], 
            jobs: ["forager", "rainier"], 
            likes: ["social", "dreamer"], 
            dislikes: ["cynical", "opportunist", "lazy"]
        }, 
        "industrious": {
            traits: ["conscientious", "consistent", "dependable", "efficient", "hardworking", "loyal", "methodical", "patient", "practical", "responsible"], 
            jobs: ["rainier", "builder"], 
            likes: ["militaristic", "perfectionist"], 
            dislikes: ["social", "dreamer", "lazy"]
        }, 
        "lazy": {
            traits: ["apathetic", "disorganized", "impatient", "indifferent", "lax", "lazy", "negligent", "selfish", "unmotivated"], 
            jobs: ["none"],
            likes: ["lazy"], 
            dislikes: ["cynical", "dreamer", "idealist", "industrious", "opportunist", "perfectionist", "rebellious", "social", "militaristic"]
        }, 
        "opportunistic": {
            traits: ["adaptable", "ambitious", "clever", "cunning", "greedy", "independent", "intelligent", "opportunistic", "resourceful", "shrewd"], 
            jobs: ["salvager", "scavenger"], 
            likes: ["militaristic", "cynic"], 
            dislikes: ["perfectionist", "idealist", "lazy"]
        }, 
        "fastidious": {
            traits: ["demanding", "exacting", "meticulous", "nervous", "obsessive", "organized", "perceptive", "precise", "sensitive", "vain"], 
            jobs: ["builder", "rainier"], 
            likes: ["industrious", "idealist"], 
            dislikes: ["dreamer", "rebellious", "lazy"]
        }, 
        "rebellious": {
            traits: ["bold", "daring", "defiant", "energetic", "moody", "nonconformist", "rebellious", "reckless", "spontaneous", "unpredictable"],
            jobs: ["salvager", "soldier"],
            likes: ["dreamer", "opportunist"],
            dislikes: ["perfectionist", "militaristic", "lazy"]
        }, 
        "social": {
            traits: ["caring", "charismatic", "chatty", "friendly", "generous", "outgoing", "persuasive", "placid", "thoughtful", "tolerant", "warm"], 
            jobs: ["rainier", "forager"], 
            likes: ["idealist", "dreamer"], 
            dislikes: ["cynical", "industrious", "lazy"]
        }, 
        "militaristic": {
            traits: ["authoritative", "confident", "disciplined", "harsh", "persistent", "pragmatic", "rational", "resilient", "serious", "tough"], 
            jobs: ["soldier", "builder"], 
            likes: ["industrious", "opportunist"], 
            dislikes: ["dreamer", "rebellious", "lazy"]
        }
    }>>

		/* Ages. Originally planned to be used to track life stage (-7 - 0 as egg, 1-14 as hatchling, etc). */	
		/* Not currently in use. */
	<<set $dAge to ["Egg", "Hatchling", "Winglet", "Adult", "Elder"]>>
	
		/* Jobs. Mostly used to keep track of potential jobs, but will be used to let dragons auto-assign themselves. */
			/* Slacker: No job. */

		/* Gatherers */
			/* Forager: Food. */
			/* Rainier: Water. */
			/* Salvager: Gold (without much success). */
			/* Scavenger: Wood & Stone. */
		
		/* Special */
			/* Builder: Builds. */
			/* Soldier: Guards, mans outposts. Might hunt. */
	<<set $dJobs = ["builder", "forager", "rainier", "salvager", "scavenger", "slacker", "soldier"]>>
	<<set $jobInfo = []>>
	<<run $jobInfo.push(
	{
		food: 4,
		water: 4,
		name: "builder",
		desc: "Builders construct things for the colony.",
		iconText: "A blank, empty square where a job icon should be."
	}, 
	{
		food: 1,
		water: 4,
		name: "forager",
		desc: "Foragers collect food for your colony.",
		iconText: "A blank, empty square where a job icon should be."
	}, 
	{
		food: 3,
		water: 1,
		name: "rainier",
		desc: "Rainiers gather water for your colony.",
		iconText: "A small, pixelated icon of three droplets of water."
	}, 
	{
		food: 3,
		water: 3,
		name: "salvager",
		desc: "Salvagers collect gold for your colony... sometimes.",
		iconText: "A blank, empty square where a job icon should be."
	}, 
	{
		food: 5,
		water: 6,
		name: "scavenger",
		desc: "Scavengers gather building materials for your colony. They may, rarely, find gold as well...",
		iconText: "A small, pixelated icon consisting of a group of rocks and trees."
	},
	{
		food: 3,
		water: 3,
		name: "slacker",
		desc: "Slackers lounge around the colony, doing nothing.",
		iconText: "A small, pixelated icon of two stylized letter 'z's."
	},
	{
		food: 5,
		water: 4,
		name: "soldier",
		desc: "Soldiers guard your territory. If they get bored, they might even hunt.",
		iconText: "A small, pixelated icon of four claw marks."
	} )>>

		/* Relationship Tracker set-up... */
	<<set $colonistRelationships = {}>>


	/* ~~~ FLUFF ~~~ */
	
		/* Dragon sizes. Most likely to be 'normal'. */
	<<set $dSize = [
		"small",
		"normal", "normal", "normal", "normal",
		"large"]>>

		/* Dragon color. Dragons will always have one! */
	<<set $dColor = ["red", "blue", "yellow", "green"]>>

		/* Body patterns / markings / etc. */
	<<set $dPattern = [
		"freckled", 
		"piebald", 
		"plain", "plain", "plain", "plain", "plain",
		"smooth", 
		"spotted",
		"striped"
	]>>

		/* Visual quirks. Most likely to be 'none'. */
	<<set $dVisQuirk = [
		"none", "none", "none", "none", "none", "none", "none", "none", "none", 
		"clean", "dull", "raggedy", "sharp teeth", "stub-tail"
	]>>




/* ~~~~~~~~~~~~~ POPULATION SET-UP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

	
	/* ~~~ IN-COLONY POPULATION TRACKERS ~~~ */		
	
		/* Population count. Set to one to account for PC. */
		/* Otherwise will equal the amount of -adult- colonists PC has. */
	<<set $pop = 1>>

		/* $eggs and $hatchlings are just arrays. */
		/* Both hold objects that are functionally timers. */
	<<set $eggs = []>>
	<<set $hatchlings = []>>

		/* $winglets isn't in use yet, but will hold half-developed dragons. */
	<<set $winglets = []>>

		/* These are your adult colonists. I should probably rename to colonists... */
	<<set $dragons = []>>

		/* Prisoners is currently unused, but will house... prisoner dragons, once I set up actually catching egg thieves or intruders. */
	<<set $prisoners = []>>



	/* ~~~ EXTERNAL POPULATION TRACKERS ~~~ */

		/* Dead anything. CoD will be contained in each individual object, as well as if they were part of your colony or not. */
	<<set $dead = []>>
		
		/* goneDragons are dragons that have left (exiled, deprived, etc) that are being held for 'return' events. */
	<<set $goneDragons = []>>



	/* ~~~ POPULATION EVENTS ~~~ */
	
		/* eggsHatched tracks how many eggs have hatched... */
		/* ... which is used in rest to know to trigger the first egg hatched event. */
		/* Same with hatchlingsGrown, in addition to both just being fun stats. */
	<<set $eggsHatched = 0>>
	<<set $hatchlingsGrown = 0>>




/* ~~~~~~~~~~~~~ RESOURCE SET-UP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

		/* Food, water, treasure, building materials. You start with nothing. */
		/* Each one is crucial in SOME way. */
		/* Food and water are daily, immediate needs that hurt PC and colonists if not fulfilled. */
		/* Building mats â wood & stone â are used to build everything. You need wood at least to even start your colony. */
		/* Gold provides a small buff to your resource-gathering colonists... and may be used in special ways later. */
	<<set $food = 0>>
	<<set $water = 0>>
	<<set $gold = 0>>
	<<set $wood = 0>>
	<<set $stone = 0>>

		/* Resource storage set-up. */
		/* Pools for water, caverns for food, dugouts for wood and stone. */
		/* Dugouts hold wood and stone, so they only need one cap. */
		/* Gold has no limiting factor. */
		/* Amount is how much of a storage building has been built, and storage is how much a single building can hold. */
		/* So one pool holds thirty water; two pools means a colony can hold sixty water. */
		/* Might make upgrades available to storage, albeit limited in scope. */
	<<set $pool = {
		amount : 1,
		storage : 30
	}>>
	<<set $waterCap = ($pool.amount * $pool.storage)>>

	<<set $cavern = {
		amount : 1,
		storage : 30
	}>>
	<<set $foodCap = ($cavern.amount * $cavern.storage)>>

	<<set $dugOut = {
		amount : 1,
		storage : 30
	}>>
	<<set $buildingMaterialCap = ($dugOut.amount * $dugOut.storage)>>




/* ~~~~~~~~~~~~~ BUILDING SET-UP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

	/* ~~~ BUILD QUEUE ~~~ */

		/* The $buildQueue itself is an array of every item the player has chosen as long-term building projects. */
		/* (Such as hollows, defensive structures...) */
		/* $buildTime is how long the current $buildQueue[0] will take to complete. */
		/* Set to -1 by default to stop the queue from trying to run at all. */
		/* Much like $buildTime, $builderStatus is set to -1 to stop them from working at all. */
	<<set $buildQueue = []>>
	<<set $buildTime = -1>>
	<<set $builderStatus = -1>>



	/* ~~~ SHELTER BUILDINGS ~~~ */

		/* $shelter is a datamap containing all information about every shelter, for quick reference in-game. */
		/* Each shelter is arranged like so: */
		/*
			<<set $shelter.NAME = {
					<!-- How much of a shelter type you have. -->
				amount : #,
					<!-- How many colonists a given shelter can hold. -->
				shelter : #,
					<!-- Stone cost to build a shelter. -->
				priceS : #,
					<!-- Wood cost to build a shelter. -->
				priceW : #,
					<!-- OPTIONAL: How long builders will take to construct the shelter. -->
			*	buildTime : #,
					<!-- How much, of the total space provided by shelters, is open to new occupants. -->
				free: #,
					<!-- How much, of the total space provided by shelters, is in use by colonists. -->
				occupied: #
			}>>
		 */
	<<set $shelter = {}>>

		/* Ruts are the most basic shelter. Not the worst, but the cheapest to make. */
		/* $builtRut is used to unlock setts after your first rut is constructed. */
	<<set $shelter.ruts = { 
		amount : 0,
		shelter : 1,
		priceS : 5,
		free : 0, 
		occupied : 0
	}>>
	<<set $builtRut = false>>

		/* Setts are improved ruts. They require an empty rut to build and are much preferred by colonists. */
	<<set $shelter.setts = {
		amount : 0,
		shelter : 1,
		priceS : 5,	
		priceW : 2,
		free : 0,
		occupied : 0
	}>>

		/* Hollows are barracks. They are the worst, bottom of the barrel shelterâbut they hold multiple dragons! */
	<<set $shelter.hollows = {
		amount : 0,
		shelter : 10,
		priceS : 30,
		priceW : 20,
		buildTime : 3,
		free : 0,
		occupied : 0
	}>>

		/* $home is calculated based on [shelter.amount] * [shelter.shelter] to determine total space in the colony. */
		/* This is run for EVERY possible shelter, and ignores occupation. */
	<<set $home = (
		($shelter.ruts.shelter * $shelter.ruts.amount) + 
		($shelter.setts.shelter * $shelter.setts.amount) + 
		($shelter.hollows.shelter * $shelter.hollows.amount)
	)>>



	/* ~~~ NURSERY BUILDINGS ~~~ */

		/* How many nests you have, and how much room you have for younglings. */
		/* Despite the name, eggSpace is used to hold both eggs and hatchies. */
	<<set $nest = 0>>
	<<set $eggSpace = ($nest * 3)>>



	/* ~~~ DEFEENSIVE BUILDINGS ~~~ */

		/* $defenseBuildings is, like $shelter, a datamap. */
		/* It's set up similarly too, though these need to be constructed by builders. */
		/* However, every building has a maximum amount that can be constructed, indicated by the max key. */
	<<set $defenseBuildings = {}>>

		/* Palisades provide a small defense boost when at MAX, as well as flavor text. */
	<<set $defenseBuildings.palisade = {
		amount : 0,
		max : 10,
		priceS : 30,
		priceW : 50,
		buildTime: 1
	}>>

		/* The moat provides a LARGE defense boost at max. */
		/* 'creatures' refers to an in-game decision for the player. */
		/* While visiting the kelpie lake, the player can choose to relocate some to the moat (if fully constructed and filled.) */
	<<set $defenseBuildings.moat = {
		amount : 0,
		max : 3,
		creatures : false,
		priceS : 150,
		priceW : 70,
		priceWa : 210,
		buildTime : 7
	}>>

		/* Rockfalls are your final defense. */
		/* They are built empty and need to be loaded with 5 stone to work. */
		/* Currently, can only be loaded via policy at day end. */
	<<set $defenseBuildings.rockfall = {
		amount : 0,
		max : 4,
		priceS : 70,
		priceW : 20,
		buildTime : 3,
		loadCost : 5,
		loaded : 0,
		empty : 0
	}>>

		/* Outposts are your first line of defense. */
		/* They need soldiers to occupy them, or else are ineffective. */
	<<set $defenseBuildings.outpost = {
		amount : 0,
		max : 5,
		priceS: 25,
		priceW: 25,
		buildTime : 2
	}>>

		/* $defenseTotal is the numerical representation of your defensiveness. */
		/* 0 by default because no structures, but recalced when a new one is built. */
	<<set $defenseTotal = 0>>




/* ~~~~~~~~~~~~~ DIPLOMACY SET-UP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/* Holdover until I actually do this. */




/* ~~~~~~~~~~~~~ MISC SET-UP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

	/* ~~~ META ~~~ */

		/* Allows access to BugTest page. Off by default, unless Cheat / Test is chosen on start page. */
	<<set $cheat = false>>

		/* How many days you've been here, and how many moon cycles! */
		/* Each cycle is 30 days: when the $days hits 30, endDay resets it to 1, and ups the cycle tracker. */
	<<set $days = 1>>
    <<set $cycles = 0>>

		/* An array tracking trophies from beaten bossses. */
		/* Differs from $player.special in that they provide no innate buff to the player character. */
		/* These are for colony use, however that shakes out. */
	<<set $trophies = []>>

		/* Flag for checking if the defense tutorial has run. Falsey until it's happened. */
	<<set $defenseTalk = false>>

	
	/* ~~~ POLICIES ~~~ */

		/* Social */
			/* $findSleep determines if you need to assign dragons to shelters, or if they'll find their own. */
		<<set $findSleep = true>>

			/* $jobHunt determines if dragons will assign themselves a job. */
		<<set $jobHunt = false>>


		/* Defensive */
			/* $autoLoad determines if your rockfalls are reloaded (as necessary) at day end. */
			/* Each reload costs 10 stone. */
		<<set $autoLoad = true>>


	/* ~~~ EVENTS ~~~ */

		/* Keeps track of current major event, and stops other major events from occuring until it's dealt with.  */
	<<set $currentEvent = "none">>

		/* These set up the Hydra. */
		/* Seen, EggTaken, and Beat are pretty self-explanatory. */
		/* Time is set to negative to prevent the EndDay from artificially launching the hydra event. */
		/* If positive there would be a countdown, and zero would trigger. */
	<<set $hydraSeen = false>>
	<<set $hydraEggTaken = false>>
	<<set $hydraTime = -1>>
	<<set $hydraBeat = false>>

		/* For the lake creatures (kelpies). */
		/* $infestedNotice triggers if you've been to the kelpie lake once and enables visits from Sandbox. */
		/* $kelpieExtinction triggers if PC decides to remove all kelpies from the lake while visiting. */
		/* $lakeClaim is whether you've personally taken over the lake or are allowing it to develop on its own. */
	<<set $infestedNotice = false>>
	<<set $kelpieExtinction = false>>
	<<set $lakeClaim = false>>
<</nobr>>

