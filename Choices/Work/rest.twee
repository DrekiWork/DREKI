:: Rest [WIP Rest] {"position":"1075,550","size":"100,100"}
<<nobr>>


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
												/* This is the REST page, where your colony's day is summarized. */
		
		/* All changes that happen automatically happen here, at the day's end. */
		/* Your dragons bring home their hauls, have their daily meal, and report their work completion. */
		/* Dragons that will leave do so at dusk as your colony winds down, whether they are hungry, exiled, or unhappy. */
		/* Hatchlings and eggs are formally hatched and grown here, during the endDay widget. */
		/* Events that are not triggered by foraging happen here (such as a thief attempting to steal your eggs, or wanderers begging to join). */
		/* You might even dream! */
		/* ... or die. */


		/* To-Do: */
			/* Re-organise. Information is currently scattered hap-hazardly. */
				/* Improve general appearance. May be good to tab these? */
			/* endDay should probably fire sooner. */
			/* Update checking for: */
				/* Exiles */
				/* eggEvent */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


	The end of the day is approaching.<br><br>


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ENDDAY ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
		/* A widget that handles a LOT of things. */
		/* Check the endDay.twee (or just endDay passage if on twine) for details. */
		/* Summary: */
			/* Updates days/cycles */
			/* Ages up colonists */
			/* Grows eggs/hatclings */
			/* Collects & distributes colonist resources */
				/* (Shelters, food, water, building mats) */
			/* Resets daily counters */
			/* Filters dragons leaving due to not having food/water */
		/* Everything follows endDay because everything needs info */
		/* Previously calculated BY endDay to report accurately. */

	<<endDay>>


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ EXILE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
		/* The following tracks exiled dragons. */
		/* It goes through a loop to check each dragon for an exile flag. */
		/* When an exiled dragon is found, it frees up the shelter they're in. */
		/* The dragon then has a dice roll: if it's lucky, it is cloned into a returner's list. */
		/* ($goneDragons) */
		/* Otherwise, the dragon's name is placed in a temporary array. */
		/* The array is printed out, then deleted. */
	<<if _exiled.length >= 3>>
		<<for _i to 0; _i < (_exiled.length); _i++>>
			<<if _i < (_exiled.length - 2)>>
				<<print _exiled[_i]>>, 
			<<else>>
				and <<print _exiled[_i]>> 
			<</if>>
		<</for>>
		have left throughout the course of the day; some together, some alone. You aren't sure you'll see any of them again. <br><br>
	<<elseif _exiled.length == 2>>
		<<print _exiled[0]>> and <<print _exiled[1]>> glance at each other and leave your home for the last time as Sun settles. <br><br>
	<<elseif _exiled.length == 1>>
		<<print _exiled>> left your camp at some point in the day, never to return. <br><br>
	<<else>>

	<</if>>

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ WORKERS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
		/* Displays worker results for the day. */
		/* Soldiers: If they've hunted, OR if a special battle event is on the way. (Currently only hydra.) */
		/* Foragers: Displays food amount gathered. */
		/* Rainiers: Displays water amount gathered. */
		/* Scavengers: Displays wood and/or stone gathered. */
		/* Builders: What progress they've made on a project; how much they'll need; and how long it will take. Otherwise, alerts player to idleness. */
			/* buildQueue is located under colonyWidgets. */

	<<if $dragons.length >= 1>>
		<<if $hydraTime > 0>>
			<<if _soldierCount > 0>>
				<<if $hydraTime < 5>>
					A soldier approaches you grimly. They tell you <strong>the hydra will be upon your colony any day now</strong>.
				<<elseif $hydraTime < 10>>
					A soldier approaches you, tension lining their body. They tell you <strong>the hydra is closing in</strong>.
				<<elseif $hydraTime <= 20>>
					A soldier approaches you, somewhat nervously. They tell you that despite storming through the forest, <strong>the hydra is not close</strong>. Yet.
				<<elseif $hydraTime > 20>>
					A soldier approaches you, professional. They tell you <strong>the hydra is still exploring outside its den</strong>; you suppose the beast hasn't been out of the waterfall cave in ages.
				<</if>>
			<<else>>
				One of your colonists approaches you in a frenzied panic; they can't tell you anything important, just that <strong>saw the hydra</strong>. A dedicated guard might be able to tell you more...
			<</if>><br><br>
		<</if>>
		

		<<if _foragerCount > 0>>
			Your <<plural _foragerCount "forager returns" "foragers return">> with their haul of <span class ="food"><<print _foragerFood>> food</span>.
		<</if>>
		<<if _soldierFood > 0>>
			Your <<plural _soldierCount "soldier" "soldiers">> went hunting, apparently; they brought back <span class="food"><<print _soldierFood>> food</span>.
		<</if>>
		<<if _rainierWater > 0>>
			Your <<plural _rainierCount "rainier returns" "rainiers return">> for the last time today, having swept in <span class="water"><<print _rainierWater>> water</span> into your pools.
		<</if>>
		<<if _hatchlingFoundFood > 0 || _hatchlingFoundWater > 0>>
			Your <<plural $hatchlings.length "hatchling presents" "hatchlings present">> you with <span class="food"><<print _hatchFood>> food</span> and <span class="water"><<print _hatchWater>> water</span> that they found. How sweet! <br><br>
		<</if>>
		<<if _scavengerWood > 0 || _scavengerStone > 0>>
			Your <<plural _scavengerCount "scavenger returns" "scavengers return">>, exhausted, with <span class="stone"><<print _scavengerStone>> stone</span>, and <span class="wood"><<print _scavengerWood>> wood</span>.
		<</if>>
		<<if _scavengerGold > 0>>
			They also found <span class="gold"><<print _scavengerGold>> gold</span>!
		<</if>>
		<<if _salvagerGold > 0 && _salvagerCount > 0>>
			In a markedly pleasant surprise, your <<plural _salvagerCount "salvager" "salvagers">> actually managed to find <span class="gold"><<print _salvagerGold>> gold</span>!
		<<elseif _salvagerCount > 0>>
			To no one's surprise, your <<plural _salvagerCount "salvager" "salvagers">> didn't find any gold today.
		<</if>>
		<br><br>

		<<builderRestDisplay>>
	<</if>>


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CHILDREN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
		/* Egg and hatchling information. */
		/* First: hatchlings have a random chance to find either food or water and present it to you. How sweet. */
		/* Then, any eggs that have hatched, or hatchies that have grown up. */
	
	<<run console.log("_firstHatched (rest) = " + _firstHatched)>>
	<<run console.log("_hatchCheck (rest) = " + _hatchCheck)>>
	<<if _firstHatched == true && _hatchCheck > 0>>
		<<linkappend "Something has happened...">>
			<hr>
			<<if _hatchCheck > 1>>
				Your head snaps up from being curled around the <<plural $eggs.length "egg" "eggs">> as something moves. Nothing happens for another moment, and you wonder if your paranoia is simply acting up - it is not easy being a <<print $player.title>>. But there is another shift, and this, you realize, is one of the eggs. You scramble to your claws, panic and joy tearing at your hearts as something within begins to //tap! Tap! Tap!// at the inside. You drop again to your belly, snuffling and cooing to the egg. Yes, you have seen many eggs hatch - assisted many yourself! - but there is something... something so different now; something strange and wonderful about this little rocking stone, the crackling of its shell...<br><br>
			
				You remember yourself after a moment, and use your claws to gently split the shell. The hatchling within, so small - so, //so// small in its egg - cries out with a high note that has you prizing away more and more shell. Eventually, a thin snout pokes out of the shell, nostrils flaring and sniffling as it takes its first breath of air. Soon enough, it returns to cracking and pushing, as you continue the task of assisting it.<br><br>

				So long later - though the moon has scarcely shifted - the hatchling shrieks, and the last of the shell falls away from it. You pull it close and clean it, rumbling softly in your throat as exhaustion claims the little thing and sends it drifting off against your chest, little breaths slowing to the gentle and deep motions of dreams.<br><br>

				You hardly have time to admire the new life—<em>your</em> first hatchling!—when another begins to rock. It's almost too much for you. Your claws tremble, threatening to become ungentle with emotion as you help the second free. Your crests rattle wildly, you half-choke on the smoke that wishes to pour from your throat.<br><br>

				It's all too much, and yet, a new heat is added to your hearts as your little ones rest against you. Nothing will ever touch them. Not if you can help it.
			<<else>>
				Your head snaps up from being curled around the <<plural $eggs.length "egg" "eggs">> as something moves. Nothing happens for another moment, and you wonder if your paranoia is simply acting up - it is not easy being a <<print $player.title>>. But there is another shift, and this, you realize, is one of the eggs. You scramble to your claws, panic and joy tearing at your hearts as something within begins to //tap! Tap! Tap!// at the inside. You drop again to your belly, snuffling and cooing to the egg. Yes, you have seen many eggs hatch - assisted many yourself! - but there is something... something so different now; something strange and wonderful about this little rocking stone, the crackling of its shell...<br><br>
			
				You remember yourself after a moment, and use your claws to gently split the shell. The hatchling within, so small - so, //so// small in its egg - cries out with a high note that has you prizing away more and more shell. Eventually, a thin snout pokes out of the shell, nostrils flaring and sniffling as it takes its first breath of air. Soon enough, it returns to cracking and pushing, as you continue the task of assisting it.<br><br>

				So long later - though the moon has scarcely shifted - the hatchling shrieks, and the last of the shell falls away from it. You pull it close and clean it, rumbling softly in your throat as exhaustion claims the little thing and sends it drifting off against your chest, little breaths slowing to the gentle and deep motions of dreams.<br><br>

				You clean them, warm with new light. They are small, delicate in the extreme and scarcely larger than your claw. You would do anything for them.
			<</if>>
			<hr>
			<</linkappend>><br><br>
	<<else>>
		<<if _hatchCheck > 0>>
			<strong><<plural _hatchCheck "egg has" "eggs have">> hatched in the Nursery!</strong><br>
		<</if>>
	<</if>>

		<<run console.log("_firstGrown(rest) = " + _firstGrown)>>
	<<if _firstGrown == true && _growCheck > 0>>
		<<linkappend "Something has happened...">>
			<hr>
			As you're doing your nightly rounds along the colony, you discover your first hatchling - your first egg, your shining-jewel - outside the nursery, watching you solemnly. You tilt your head in silent permission for them to speak.<br><br>
			
			"I think I am ready for work," they say softly. "I am large and strong enough, and have been exploring the edges of the home-grounds. I know what is edible now, and how to navigate - you've taught me well." It sounds so much like a plead. "I wish to work, <<print $player.title>>. Please."<br><br>
			
			You startle at the sound of your title - for all that you have raised them, your heart-of-hearts has referred to you as nothing but the purring-click that all hatchlings call their brooders. Certainly, you told them of who you are - //what// you are. But they never saw cause to address you as such.<br><br>
			
			... They mean it.<br><br>
			
			In respect to the gravity of their request, you assume your mantle of <<print $player.title>>, and, with quiet authority, inform them to be gone from the nursery by dawn. They will work now. The relief and gratitude in their eyes is painful as they disappear into the nursery - to say goodbye to their younger sibling, you assume.<br><br>
			
			Your chest feels tight as you continue your evening rounds. Has time really moved so quickly?
			<hr>
		<</linkappend>><br><br>
	<<elseif _growCheck > 0>>
		<strong><<plural _growCheck "hatchling has" "hatchlings have">> have moved out of the Nursery!</strong><br><br>
	<<elseif _hatchCheck > 0>>
		<br>
	<<else>>
	<</if>>


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DEFENSES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
		/* Building actions being handled. Might move this to endDay. */
		/* Currently only contains rockfall status, as determined by autoload. */
		/* (Autoload is currently the only way to load the rockfalls...) */

	<<switch _rockfallStatus>>
		<<case 0>>
		
		<<case 1>>
			The <<plural $defenseBuildings.rockfall.amount "rockfall was" "rockfalls were">> fully reloaded, and wait to be used.<br><br>
		
		<<case 2>>
			Some of your rockfalls were loaded; <<plural $defenseBuildings.rockfall.empty "rockfall remains" "rockfalls remain">> empty.<br><br>
		
		<<case 3>>
			Your <<plural $defenseBuildings.rockfall.amounts "rockfall was" "rockfalls were">> left unloaded, due to lack of ammo. You need at least <<print $defenseBuildings.rockfall.loadCost>> stone to load one more, and <<print ($defenseBuildings.rockfall.loadCost * $defenseBuildings.rockfall.empty)>> total stone for all of them.<br><br>

		<<case 4>>
			Your <<plural $defenseBuildings.rockfall.empty "rockfall was" "rockfalls were">> left unloaded, as your current policy is to fill them manually.<br><br>

	<</switch>>


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HOUSING ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
<<if _newHouse.length > 1>>
	<<for _i = 0; _i < _newHouse.length; _i++>>
		<<if _i < (_newHouse.length - 1)>>
			<<print _newHouse[_i]>>, 
		<<else>>
			and <<print _newHouse[_i]>>
		<</if>>
	<</for>>
	have found unused shelters to live in.
<<elseif _newHouse.length > 0>>
	<<print _newHouse[0]>> found an unused shelter to live in.
<</if>>

<<if _movedHouse.length > 1>>
	<<for _i = 0; _i < _movedHouse.length; _i++>>
		<<if _i < (_movedHouse.length - 1)>>
			<<print _movedHouse[_i]>>, 
		<<else>>
			and <<print _movedHouse[_i]>>
		<</if>>
	<</for>>
	found better accomodations and decided to move.
<<elseif _movedHouse.length > 0>>
	<<print _movedHouse[0]>> found better accomodations and decided to move.
<</if>>

<<if _noHouse.length > 1>>
	<<for _i = 0; _i < _noHouse.length; _i++>>
		<<if _i < (_noHouse.length - 1)>>
			<<print _noHouse[_i]>>, 
		<<else>>
			and <<print _noHouse[_i]>>
		<</if>>
	<</for>>
	have nowhere to shelter for the night; you might want to build more homes, because they'll be eating more to cope.<br><br>

<<elseif _noHouse.length > 0>>
	<<print _noHouse[0]>> has nowhere to shelter for the night; you might want to build another home, because they'll be eating more to cope.<br><br>

<<elseif _newHouse.length > 0 || _movedHouse.length > 0>>
	<br><br>

<</if>>


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CONSUMPTION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
		/* First: Check if player is dead. If yes, go directly to the game-over screen. */
		/* Otherwise, feed and water player. */
		/* Then hatchlings; hatchlings are not as complex as adults, so only a number of deprived children + what you were missing is given. */
		/* Adults last; names of deprived colonists are provided, as well as what you were missing. */

	<<if $player.health <= 0>>
			[[...|SandboxDeath]]
	<<else>>
		<<if $player.home.built == true>>
			<<if _pcHungry == true && _pcThirsty == true>>
				<<set _remaining = ($player.health / 2)>>
				Your stomach rumbles quietly and your throat feels terribly dry. You didn't get to eat or drink today. You can last <<print _remaining>> more day<<if _remaining > 1>>s<</if>> without eating or drinking...
			<<elseif _pcHungry == true>>
				Your stomach rumbles quietly, but you were able to drink 5 water.
			<<elseif _pcThirsty == true>>
				Your throat feels terribly dry, but you were able to eat 4 food.
			<<else>>
				You eat 4 food and drink 5 water.
			<</if>>
		<<else>>
			<<if _pcHungry == true && _pcThirsty == true>>
				<<set _remaining = ($player.health / 2)>>
				Your stomach rumbles quietly and your throat feels terribly dry. You didn't get to eat or drink today. You can last <<print _remaining>> more day<<if _remaining > 1>>s<</if>> without eating or drinking...
			<<elseif _pcHungry == true>>
				Your stomach rumbles quietly, but you were able to drink 10 water.
			<<elseif _pcThirsty == true>>
				Your throat feels terribly dry, but you were able to eat 8 food.
			<<else>>
				You eat 8 food and drink 10 water.
			<</if>>
		<</if>>
		
		<<if $hatchlings.length > 0>>
			<<if _hatchlingFood > 0 || _hatchlingWater > 0>>
				Your <<plural $hatchlings.length "hatchling has" "hatchlings have">> <<print _hatchlingFood>> food and <<print _hatchlingWater>> water.
			<</if>>
			<<if _hatchlingHungry > 0 || _hatchlingThirsty > 0>>
				<<set _needyHatchlings = (_hatchlingHungry + _hatchlingThirsty)>>
				Unfortunately, <<plural _needyHatchlings "hatchling" "hatchlings">> didn't have any; you needed <<print _hatchlingFoodNeed>> more food and <<print _hatchlingWaterNeed>> water for them.
			<</if>>
		<</if>>

		<<if $dragons.length > 0>>
			<<if _dragonsAte > 0 && _dragonsDrank > 0>>
				The rest of your colony eats <<print _dragonsAte>> food, and drinks <<print _dragonsDrank>> water.

			<<elseif _dragonsAte > 0>>
				The rest of your colony eats <<print _dragonsAte>> food.

			<<elseif _dragonsDrank > 0>>
				The rest of your colony drinks <<print _dragonsDrank>> water.

			<</if>>

			<<if _dragonsHungry.length > 0 & _dragonsThirsty.length > 0>>
				<<print _dragonsHungry.length>> did not get to eat, and <<print _dragonsThirsty.length>> did not drink. You needed <<print _dragonsFoodNeeded>> more food to feed them, and <<print _dragonsWaterNeeded>> more water.
				
			<<elseif _dragonsHungry.length > 0>>
				<<print _dragonsHungry.length>> did not eat today—you needed <<print _dragonsFoodNeeded>> more food to fill them all.

			<<elseif _dragonsThirsty.length > 0>>
				<<print _dragonsThirsty.length>> did not drink today—you needed <<print _dragonsWaterNeeded>> more water to slake them all.

			<</if>>
		<</if>><br><br>



/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LEAVING DRAGONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
		/* Deprived dragons are listed here. */
		/* This happens if they go three days without food, or three days without water. */

	<<if _left.length >= 2>>
		<<for _i to 0; _i < _left.length; _i++>>
			<<if _i !== (_left.length - 1)>>
				<<print _left[_i]>>, 
			<<elseif _i == (_left.length - 1)>>
				and <<print _left[_i]>>,
			<</if>>
	<</for>> after being denied their rations, have left. You don't expect to see them come back, no matter how it hurts.<br><br>
	<<elseif _left.length == 1>>
		<<print _left>>, after finding too little for themselves, leaves quietly. On your final rounds, you are not surprised to see them gone entirely.<br><br>
	<</if>>
	

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ END ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
		/* Finally. */
		/*  First, checks for a major event happening. */
		/* If no major events are in progress, decides if the player will have a night event, a dream, or nothing. */
		/* Dreams and one of the two night events are flavor. */
		/* The second night event is wanderers attempting to join. */
		
		<<switch $currentEvent>>
			
			<<case "HydraRaid">>
				[[It's time for another day...|HydraRaid]]

			<<case "none">>
				<<set _eventChance to random(15)>>
				<<if _eventChance <= 3>>
					<<set _dream to random(0, 5)>>
					<<if _dream == 1>>
				You dream of flying among the stars. They do not welcome you, but their light is guiding you to a far off point. [[You wake up before you see where.|Sandbox Central]]
					<<elseif _dream == 2>>
				You are back in your home colony, being lavished with love and attention; the Founder themselves smiles upon you, and gifts you endless piles of gold and treasure; you're lauded a hero, and everywhere you look are smiling, adoring faces. [[You wake up happy, if homesick.|Sandbox Central]]
					<<elseif _dream == 3>>
				You dream of battle, and glory. You dream of fighting for your life against beings that avoid your claws and teeth and flames with practiced ease. [[You drown in their violence.|Sandbox Central]]
					<<else>>
				[[It's time for another day.|Sandbox Central]]
					<</if>>
				<<elseif _eventChance == 4>>
					<<set _event = random(0,2)>>
					<<switch _event>>
						<<case 0>>
							Before you can settle down to bed, there comes a commotion [[at the edge of your home.|eventJoin]]
						<<case 1>>
							As you start to close your nightly patrol, [[you see something in the darkness.|eventIntruder]]
						<<case 2>>
							<<if $goneDragons.length > 0>>
								While flying over your territory's perimeter, you [[spot someone familiar...|eventReturn]]
							<<else>>
								<<set _random to random(1)>>
								<<if _random is 1>>
									Before you can settle down to bed, there comes a commotion [[at the edge of your home.|eventJoin]]
								<<else>>
									As you start to close your nightly patrol, [[you see something in the darkness.|eventIntruder]]
								<</if>>
							<</if>>
					<</switch>>
				<<else>>
				[[It's time for another day.|Sandbox Central]]
				<</if>> 
			<<case default>>
				<<run console.log("Defaulted on event. $currentEvent: " + $currentEvent)>>
				[[It's time for another day.|Sandbox Central]]
		<</switch>>
	<</if>>

<</nobr>>